// Optimized JavaScript - removed unused variables and functions
const flashSection = document.getElementById("flashSection")
const statusSection = document.getElementById("statusSection")
const installButton = document.getElementById("installButton")
const tabBtns = document.querySelectorAll(".tab-btn")
const tabPanes = document.querySelectorAll(".tab-pane")
const chipTabBtns = document.querySelectorAll(".chip-tab-btn")
const chipTabContents = document.querySelectorAll(".chip-tab-content")
const progressFill = document.getElementById("progressFill")
const mainGuideTabBtns = document.querySelectorAll(".main-guide-tab-btn")
const mainGuideTabContents = document.querySelectorAll(".main-guide-tab-content")
const fwCards = document.querySelectorAll(".fw-button")
const chipGrid = document.getElementById("chipGrid")
const chipSelection = document.getElementById("chipSelection")
const oledSelection = document.getElementById("oledSelection")
const oledButtons = document.querySelectorAll(".oled-button")

let selectedChip = null
let selectedFw = null
let selectedOled = null

const chipOptions = {
  mochi_nav: [
    { chip: "esp32", label: "ESP32" },
    { chip: "esp32c3", label: "ESP32-C3" },
  ],
  xiaozhi: [
    { chip: "esp32s3", label: "ESP32-S3 N16R8 (WakeUp Word) - Hi, Lily" },
    { chip: "esp32s3_mini", label: "ESP32-S3 Mini (No WakeUp)" },
    { chip: "esp32s3_zero", label: "ESP32-S3 Zero (WakeUp Word) - Hi, Lily" },
  ],
}

// Map th∆∞ m·ª•c & ti·ªÅn t·ªë t√™n file cho t·ª´ng chip Xiaozhi
const XIAOZHI_CHIP_MAP = {
  esp32s3: { dir: "esp32s3", filePrefix: "xiaozhi_esp32s3" },
  esp32s3_mini: { dir: "esp32s3mini", filePrefix: "xiaozhi_esp32s3mini" },
  esp32s3_zero: { dir: "esp32s3zero", filePrefix: "xiaozhi_esp32s3zero" }, // NEW
};


function initializeApp() {
  try {
    setupEventListeners()
    console.log("·ª®ng d·ª•ng ƒë√£ kh·ªüi t·∫°o th√†nh c√¥ng")
  } catch (error) {
    showError("Kh√¥ng th·ªÉ kh·ªüi t·∫°o ·ª©ng d·ª•ng.")
    console.error("L·ªói kh·ªüi t·∫°o ·ª©ng d·ª•ng:", error)
  }
}

function getXiaozhiLang() {
  // ∆Øu ti√™n ƒë·ªçc t·ª´ path: /en/ ho·∫∑c /vi/ (kh√¥ng c·∫ßn d·∫•u / cu·ªëi)
  // V√≠ d·ª• kh·ªõp: /en, /en/, /en/something, /vi, /vi/, /vi/abc
  const path = (typeof location !== "undefined" ? location.pathname : "") || "";
  const m = path.match(/^\/(en|vi)(?:\/|$)/i);
  if (m && m[1]) return m[1].toLowerCase();

  // Cho ph√©p override th·ªß c√¥ng n·∫øu c·∫ßn: window.XIAOZHI_LANG = 'en' | 'vi'
  if (typeof window !== "undefined" && (window.XIAOZHI_LANG === "en" || window.XIAOZHI_LANG === "vi")) {
    return window.XIAOZHI_LANG;
  }

  // Fallback cu·ªëi: ƒë·ªçc t·ª´ th·∫ª <html lang="..."> n·∫øu c√≥, m·∫∑c ƒë·ªãnh 'vi'
  const htmlLang = (document.documentElement.getAttribute("lang") || "").toLowerCase();
  if (htmlLang === "en" || htmlLang === "vi") return htmlLang;

  return "vi";
}



// Function to generate firmware binary file name and path
function generateFirmwarePath(fw, chip, oled = null) {
  let binaryFileName = ""
  let folderPath = ""

  if (fw === "mochi_nav") {
    // MochiNav: mochi_nav_esp32.bin, mochi_nav_esp32c3.bin
    binaryFileName = `mochi_nav_${chip}.bin`
    folderPath = `../firmware/${fw}/${chip}`
  } else if (fw === "xiaozhi") {
    const lang = getXiaozhiLang();
    const map = XIAOZHI_CHIP_MAP[chip];
    if (!map) throw new Error(`Chip ch∆∞a ƒë∆∞·ª£c h·ªó tr·ª£: ${chip}`);

    // T√™n file theo chip c·ª• th·ªÉ
    binaryFileName = `${map.filePrefix}_oled${oled}.bin`;
    // ƒê∆∞·ªùng d·∫´n c√≥ ng√¥n ng·ªØ + th∆∞ m·ª•c chip ri√™ng
    folderPath = `../firmware/${fw}/${lang}/${map.dir}/oled${oled}`;
  }

  return {
    binaryFileName,
    folderPath,
    fullPath: `${folderPath}/${binaryFileName}`,
  }
}

// Function to check if firmware binary file exists
async function checkFirmwareExists(fw, chip, oled = null) {
  try {
    const { fullPath } = generateFirmwarePath(fw, chip, oled)

    console.log(`Checking firmware: ${fullPath}`)

    const response = await fetch(fullPath, { method: "HEAD" })
    const exists = response.ok

    if (exists) {
      console.log(`‚úÖ Firmware found: ${fullPath}`)
    } else {
      console.log(`‚ùå Firmware not found: ${fullPath}`)
    }

    return exists
  } catch (error) {
    console.log(`‚ùå Error checking firmware: ${fw}/${chip}${oled ? `/oled${oled}` : ""} - ${error.message}`)
    return false
  }
}

async function updateFlashButtonVisibility() {
  const shouldShow =
    (selectedFw === "mochi_nav" && selectedChip) || (selectedFw === "xiaozhi" && selectedChip && selectedOled)

  if (!shouldShow) {
    flashSection.style.display = "none"
    return
  }

  // Show loading state while checking
  flashSection.style.display = "block"
  showFirmwareCheckingState()

  // Check if firmware binary exists
  const firmwareExists = await checkFirmwareExists(selectedFw, selectedChip, selectedOled)

  if (firmwareExists) {
    // Show connect button if firmware exists
    setupEspWebToolsWithManifest(selectedChip)
  } else {
    // Show message if firmware doesn't exist
    showFirmwareNotAvailableMessage()
  }
}

function showFirmwareCheckingState() {
  const espWebToolsContainer = document.getElementById("espWebToolsContainer")

  espWebToolsContainer.innerHTML = `
    <div class="firmware-checking">
      <div class="checking-icon">üîç</div>
      <p>ƒêang ki·ªÉm tra firmware...</p>
    </div>
  `
}

function showFirmwareNotAvailableMessage() {
  const espWebToolsContainer = document.getElementById("espWebToolsContainer")

  // Create firmware name for display
  const firmwareName = selectedFw === "mochi_nav" ? "MochiNav" : "Xiaozhi"
  const chipName = selectedChip.toUpperCase().replace("_", "-")
  const oledInfo = selectedOled ? ` v·ªõi OLED ${selectedOled}"` : ""
  const { binaryFileName, folderPath } = generateFirmwarePath(selectedFw, selectedChip, selectedOled)

  espWebToolsContainer.innerHTML = `
    <div class="firmware-not-available">
      <div class="not-available-icon">‚ö†Ô∏è</div>
      <h4>Firmware Ch∆∞a S·∫µn S√†ng</h4>
      <p>Hi·ªán t·∫°i firmware <strong>${firmwareName}</strong> cho chip <strong>${chipName}</strong>${oledInfo} ƒëang ƒë∆∞·ª£c ph√°t tri·ªÉn.</p>
      <p class="coming-soon">Nh·∫Øn tin Zalo ho·∫∑c Facebook ƒë·ªÉ nh·∫≠n file ch∆∞∆°ng tr√¨nh m·ªõi nh·∫•t! üöÄ</p>
    </div>
  `
}

function setupEspWebToolsWithManifest(chipType) {
  let manifestPath = ""

  if (selectedFw === "mochi_nav") {
    manifestPath = `../firmware/${selectedFw}/${chipType}/manifest.json`
  } else if (selectedFw === "xiaozhi") {
    const lang = getXiaozhiLang();
    const map = XIAOZHI_CHIP_MAP[chipType];
    if (!map) throw new Error(`Chip ch∆∞a ƒë∆∞·ª£c h·ªó tr·ª£: ${chipType}`);

    manifestPath = `../firmware/${selectedFw}/${lang}/${map.dir}/oled${selectedOled}/manifest.json`;
  }



  // Reset container content to show ESP Web Tools button
  const espWebToolsContainer = document.getElementById("espWebToolsContainer")
  espWebToolsContainer.innerHTML = `
    <esp-web-install-button class="invisible" id="installButton"></esp-web-install-button>
  `

  // Re-get the button element after innerHTML reset
  const newInstallButton = document.getElementById("installButton")
  newInstallButton.manifest = manifestPath
  newInstallButton.setAttribute("erase-first", "")
  newInstallButton.classList.remove("invisible")

  newInstallButton.innerHTML = `
    <button slot="activate" class="btn btn-primary" style="margin: 0 auto; display: block;">
      K·∫øt n·ªëi
    </button>
  `

  // Remove existing listeners to prevent duplicates
  newInstallButton.removeEventListener("state-changed", handleFlashStateChange)
  newInstallButton.addEventListener("state-changed", handleFlashStateChange)
}

function handleFlashStateChange(event) {
  const state = event.detail.state
  const statusIcon = document.getElementById("statusIcon")
  const statusTitle = document.getElementById("statusTitle")
  const statusMessage = document.getElementById("statusMessage")

  const stateConfig = {
    preparing: {
      icon: "‚è≥",
      title: "ƒêang chu·∫©n b·ªã...",
      message: "ƒêang chu·∫©n b·ªã n·∫°p firmware",
      progress: "10%",
    },
    erasing: {
      icon: "üîÑ",
      title: "ƒêang x√≥a Flash...",
      message: "ƒêang x√≥a firmware c≈©",
      progress: "30%",
    },
    writing: {
      icon: "üìù",
      title: "ƒêang ghi Firmware...",
      message: "ƒêang c√†i ƒë·∫∑t firmware m·ªõi",
      progress: "70%",
    },
    finished: {
      icon: "‚úÖ",
      title: "Th√†nh c√¥ng!",
      message: "Firmware ƒë√£ ƒë∆∞·ª£c c√†i ƒë·∫∑t th√†nh c√¥ng",
      progress: "100%",
      notification: { message: "Firmware ƒë√£ ƒë∆∞·ª£c c√†i ƒë·∫∑t th√†nh c√¥ng!", type: "success" },
      hideAfter: 3000,
    },
    error: {
      icon: "‚ùå",
      title: "L·ªói",
      message: "Kh√¥ng th·ªÉ c√†i ƒë·∫∑t firmware",
      progress: "0%",
      notification: { message: "Kh√¥ng th·ªÉ c√†i ƒë·∫∑t firmware", type: "error" },
      hideAfter: 5000,
    },
  }

  const config = stateConfig[state]
  if (!config) return

  if (state === "preparing") showStatusSection()

  statusIcon.textContent = config.icon
  statusTitle.textContent = config.title
  statusMessage.textContent = config.message
  progressFill.style.width = config.progress

  if (config.notification) {
    showNotification(config.notification.message, config.notification.type)
  }

  if (config.hideAfter) {
    setTimeout(hideStatusSection, config.hideAfter)
  }
}

function showStatusSection() {
  statusSection.style.display = "block"
  statusSection.classList.add("fade-in")
}

function hideStatusSection() {
  statusSection.style.display = "none"
  statusSection.classList.remove("fade-in")
}

function switchTab(tabId) {
  tabPanes.forEach((pane) => pane.classList.remove("active"))
  document.getElementById(tabId).classList.add("active")

  tabBtns.forEach((btn) => {
    btn.classList.toggle("active", btn.dataset.tab === tabId)
  })
}

function switchChipTab(chipTabId) {
  chipTabContents.forEach((content) => content.classList.remove("active"))
  document.getElementById(chipTabId + "-content").classList.add("active")

  chipTabBtns.forEach((btn) => {
    btn.classList.toggle("active", btn.dataset.chipTab === chipTabId)
  })
}

function switchMainTab(tabId) {
  mainGuideTabContents.forEach((content) => content.classList.remove("active"))
  document.getElementById(tabId).classList.add("active")

  mainGuideTabBtns.forEach((btn) => {
    btn.classList.toggle("active", btn.dataset.mainTab === tabId)
  })
}

function resetSelections() {
  chipSelection.style.display = "block"
  chipGrid.innerHTML = ""
  oledSelection.style.display = "none"
  flashSection.style.display = "none"
  statusSection.style.display = "none"
  selectedChip = null
  selectedOled = null
}

function createChipButton(opt) {
  const btn = document.createElement("button")
  btn.className = "chip-button"
  btn.dataset.chip = opt.chip
  btn.textContent = opt.label

  btn.addEventListener("click", async () => {
    document.querySelectorAll(".chip-button").forEach((b) => b.classList.remove("active"))
    btn.classList.add("active")
    selectedChip = opt.chip

    if (selectedFw === "xiaozhi") {
      oledSelection.style.display = "block"
      oledButtons.forEach((b) => b.classList.remove("active"))
      selectedOled = null
    } else {
      oledSelection.style.display = "none"
    }

    await updateFlashButtonVisibility()
  })

  return btn
}

function setupEventListeners() {
  // Firmware selection
  fwCards.forEach((card) => {
    card.addEventListener("click", () => {
      fwCards.forEach((btn) => btn.classList.remove("active"))
      card.classList.add("active")
      selectedFw = card.dataset.fw

      resetSelections()

      chipOptions[selectedFw].forEach((opt) => {
        chipGrid.appendChild(createChipButton(opt))
      })
    })
  })

  // OLED selection
  oledButtons.forEach((oledBtn) => {
    oledBtn.addEventListener("click", async () => {
      oledButtons.forEach((b) => b.classList.remove("active"))
      oledBtn.classList.add("active")
      selectedOled = oledBtn.dataset.oled
      await updateFlashButtonVisibility()
    })
  })

  // Tab navigation
  tabBtns.forEach((btn) => {
    btn.addEventListener("click", () => switchTab(btn.dataset.tab))
  })

  // Chip tab navigation
  chipTabBtns.forEach((btn) => {
    btn.addEventListener("click", () => switchChipTab(btn.dataset.chipTab))
  })

  // Main guide tabs
  mainGuideTabBtns.forEach((btn) => {
    btn.addEventListener("click", () => switchMainTab(btn.dataset.mainTab))
  })

  // Escape key handler
  document.addEventListener("keydown", (event) => {
    if (event.key === "Escape" && flashSection.style.display === "block") {
      flashSection.style.display = "none"
      document
        .querySelectorAll(".chip-button, .fw-button, .oled-button")
        .forEach((card) => card.classList.remove("active"))
      selectedChip = null
      selectedFw = null
      selectedOled = null
    }
  })
}

function showError(message) {
  console.error(message)
  showNotification(message, "error")
}

function showNotification(message, type = "info") {
  const notification = document.createElement("div")
  notification.className = `notification notification-${type}`
  notification.textContent = message

  const colors = {
    info: "#0ea5e9",
    success: "#22c55e",
    warning: "#f59e0b",
    error: "#ef4444",
  }

  Object.assign(notification.style, {
    position: "fixed",
    top: "20px",
    right: "20px",
    padding: "1rem 1.5rem",
    borderRadius: "8px",
    color: "white",
    fontWeight: "600",
    zIndex: "1000",
    backgroundColor: colors[type] || colors.info,
    transform: "translateX(100%)",
    transition: "transform 0.3s ease",
  })

  document.body.appendChild(notification)

  setTimeout(() => (notification.style.transform = "translateX(0)"), 100)

  setTimeout(() => {
    notification.style.transform = "translateX(100%)"
    setTimeout(() => {
      if (document.body.contains(notification)) {
        document.body.removeChild(notification)
      }
    }, 300)
  }, 3000)
}

// Popup management
function initializePopups() {
  const fbPopup = document.getElementById("fbJoinPopup")
  const keyPopup = document.getElementById("keyWarningPopup")

  // Facebook popup
  if (fbPopup) {
    const closeBtn = fbPopup.querySelector("#closePopupBtn")
    const joinBtn = fbPopup.querySelector("#joinButton")

    fbPopup.style.display = "flex"

    closeBtn?.addEventListener("click", () => (fbPopup.style.display = "none"))
    joinBtn?.addEventListener("click", () => {
      window.open("https://www.facebook.com/share/g/1G743kz7iZ/", "_blank")
      fbPopup.style.display = "none"
    })
  }

  // Key warning popup
  if (keyPopup && !localStorage.getItem("hideKeyWarning")) {
    const closeBtn = keyPopup.querySelector("#closePopupBtn")
    const dontShowAgain = keyPopup.querySelector("#dontShowAgain")

    keyPopup.style.display = "flex"

    closeBtn?.addEventListener("click", () => {
      if (dontShowAgain?.checked) {
        localStorage.setItem("hideKeyWarning", "true")
      }
      keyPopup.style.display = "none"
    })
  }
}


const WORKER_URL = "https://license-signer.tandev.workers.dev/sign";
let port, reader, writer;
let currentMac = ""; // L∆∞u MAC ƒë√£ ƒë·ªçc ƒë·ªÉ d√πng khi k√Ω

// --- ti·ªán √≠ch UI ---
const $ = s => document.querySelector(s);
const escapeHtml = s => s.replace(/[&<>"']/g, c => ({ '&': '&amp;', '<': '&lt;', '>': '&gt;', '"': '&quot;', "'": '&#39;' }[c]));
const log = (m, cls = "") => {
  const el = $("#log");
  const t = new Date().toLocaleTimeString();
  el.innerHTML += `<div class="${cls}">[${t}] ${escapeHtml(m)}</div>`;
  el.scrollTop = el.scrollHeight;
};

// --- ti·ªán √≠ch UI ---
function setStatusUI(isSigned, reason = "") {
  const badge = $("#statusBadge");
  if (isSigned) {
    badge.className = "badge ok";
    badge.textContent = "ƒê√É K√ù ‚Ä¢ Full features";
  } else {
    badge.className = "badge err";
    badge.textContent = reason ? `CH∆ØA K√ù ‚Ä¢ ${reason}` : "CH∆ØA K√ù";
  }
}

// C·∫≠p nh·∫≠t ti√™u ƒë·ªÅ theo MAC (ch·ªâ ƒë·ªÉ MAC, kh√¥ng ·∫£nh h∆∞·ªüng badge)
function setMacTitle(mac) {
  currentMac = (mac || "").toUpperCase();
  $("#title").textContent = currentMac ? `MAC: ${currentMac}` : "MAC: Ch∆∞a k·∫øt n·ªëi";
}


// --- h√†ng ƒë·ª£i ch·ªù d√≤ng ph√π h·ª£p ---
const waiters = [];
function notifyLine(line) {
  let m;

  // 1) C·∫≠p nh·∫≠t tr·∫°ng th√°i k√Ω
  if ((m = line.match(/^STATUS:\s*SIGNED\b/i))) {
    setStatusUI(true);
  } else if ((m = line.match(/^STATUS:\s*UNSIGNED(?:\s*\((.*)\))?/i))) {
    const reason = m[1] ? m[1] : "";
    setStatusUI(false, reason);
  } else if (/^SIGNED\b/i.test(line)) {
    setStatusUI(true);
  } else if ((m = line.match(/^UNSIGNED\b(?::\s*(.*))?/i))) {
    const reason = m[1] ? m[1] : "";
    setStatusUI(false, reason);
  }

  // 2) B·∫Øt DID/MAC ƒë·ªÉ hi·ªÉn th·ªã l√™n title
  // H·ªó tr·ª£ c·∫£ hai d·∫°ng ti·ªÅn t·ªë: "DID:" ho·∫∑c "MAC:"
  if ((m = line.match(/^(?:DID|MAC):\s*([0-9A-F]{2}(?::[0-9A-F]{2}){5})$/i))) {
    setMacTitle(m[1]);
  }

  // 3) ƒê√°nh th·ª©c c√°c waiter
  for (let i = waiters.length - 1; i >= 0; i--) {
    const { re, resolve } = waiters[i];
    if (re.test(line)) { waiters.splice(i, 1); resolve(line); }
  }
}

function waitForLine(re, timeoutMs = 5000) {
  return new Promise((resolve, reject) => {
    const timer = setTimeout(() => {
      const idx = waiters.findIndex(w => w.resolve === resolve);
      if (idx >= 0) waiters.splice(idx, 1);
      reject(new Error("timeout waiting for line: " + re));
    }, timeoutMs);
    waiters.push({ re, resolve: (line) => { clearTimeout(timer); resolve(line); } });
  });
}

// --- read pump: ƒë·ªçc n·ªÅn, log & ph√°t s·ª± ki·ªán d√≤ng ---
let pumpRunning = false;
async function startReadPump() {
  if (pumpRunning) return;
  pumpRunning = true;
  const dec = new TextDecoder();
  let buf = "";
  try {
    while (true) {
      const { value, done } = await reader.read();
      if (done) break;
      if (!value) continue;
      buf += dec.decode(value);
      let i;
      while ((i = buf.indexOf("\n")) >= 0) {
        let line = buf.slice(0, i).replace(/\r/g, "").trim();
        buf = buf.slice(i + 1);
        if (!line) continue;
        log("<< " + line);
        notifyLine(line);
      }
    }
  } catch (e) {
    // ignore
  } finally { pumpRunning = false; }
}

// --- serial open / write ---
async function openSerial() {
  if (!("serial" in navigator)) { alert("Tr√¨nh duy·ªát kh√¥ng h·ªó tr·ª£ Web Serial."); return; }
  port = await navigator.serial.requestPort();
  await port.open({ baudRate: 115200 });

  // ESP32-S3 USB-CDC th∆∞·ªùng c·∫ßn DTR=true
  try { await port.setSignals?.({ dataTerminalReady: true, requestToSend: false }); } catch { }

  reader = port.readable.getReader();
  writer = port.writable.getWriter();
  startReadPump();

  log("ƒê√£ k·∫øt n·ªëi serial.");
  $("#btnGetDid").disabled = false;
  $("#btnActivate").disabled = false;
  $("#btnReboot").disabled = false;

  // Ngay khi k·∫øt n·ªëi: h·ªèi HELLO ƒë·ªÉ l·∫•y STATUS + DID/MAC cho UI
  await sendLine("HELLO");
  // ch·ªù ph·∫£n h·ªìi (kh√¥ng ch·∫∑n UI n·∫øu timeout)
  waitForLine(/^STATUS:/i, 1500).catch(() => { });
  // H·ªó tr·ª£ c·∫£ DID:.. ho·∫∑c MAC:..
  waitForLine(/^(?:DID|MAC):\s*[0-9A-F]{2}(?::[0-9A-F]{2}){5}$/i, 1500).catch(() => { });
}

async function sendLine(line) {
  const enc = new TextEncoder();
  await writer.write(enc.encode(line + "\r\n")); // CRLF
  log(">> " + line);
}

// --- nghi·ªáp v·ª• ---
async function getDid() {
  const MAX_TRY = 2;
  for (let attempt = 1; attempt <= MAX_TRY; attempt++) {
    await sendLine("GETDID");
    try {
      const line = await waitForLine(/^(?:DID|MAC):\s*[0-9A-F]{2}(?::[0-9A-F]{2}){5}$/i, 2000);
      const m = line.match(/^(?:DID|MAC):\s*([0-9A-F]{2}(?::[0-9A-F]{2}){5})$/i);
      const mac = m[1].toUpperCase();
      setMacTitle(mac);
      log("MAC: " + mac, "ok");
      return mac;
    } catch (e) {
      log(`Kh√¥ng th·∫•y MAC (l·∫ßn ${attempt})`, "err");
    }
  }
  throw new Error("Kh√¥ng nh·∫≠n ƒë∆∞·ª£c MAC/DID t·ª´ ESP32");
}

function showPayload(license) {
  try {
    const payloadB64 = license.split(".")[0];
    const json = JSON.parse(atob(payloadB64));
    log("Payload: " + JSON.stringify(json, null, 2), "ok");
  } catch (e) { log("Decode payload l·ªói: " + e, "err"); }
}

async function activate() {
  const activationKey = $("#inpKey").value.trim();
  if (!currentMac) { alert("H√£y b·∫•m 'K·∫øt n·ªëi' ho·∫∑c 'L·∫•y MAC' tr∆∞·ªõc."); return; }
  if (!activationKey) { alert("Nh·∫≠p activation key!"); return; }

  log("G·ªçi server k√Ω...");
  const res = await fetch(WORKER_URL, {
    method: "POST",
    headers: { "Content-Type": "application/json" },
    body: JSON.stringify({ deviceId: currentMac, activationKey })
  });
  const js = await res.json().catch(() => ({}));
  if (!res.ok) { log("Sign l·ªói: " + JSON.stringify(js), "err"); return; }

  const license = js.license;
  log("Nh·∫≠n license OK.");
  showPayload(license);

  await sendLine("LIC:" + license);

  // ch·ªù [OK] ho·∫∑c [ERR:...]; ƒë·ªìng th·ªùi s·∫Ω c√≥ d√≤ng SIGNED/UNSIGNED ƒë·ªÉ UI c·∫≠p nh·∫≠t
  try {
    const ok = await waitForLine(/^\[(OK|ERR:.*)\]$/i, 5000);
    if (/^\[OK\]$/i.test(ok)) {
      log("ESP32 x√°c nh·∫≠n license.", "ok");
      setStatusUI(true);
    } else {
      log("ESP32 t·ª´ ch·ªëi license: " + ok, "err");
    }
  } catch {
    log("Kh√¥ng nh·∫≠n ƒë∆∞·ª£c ph·∫£n h·ªìi t·ª´ ESP32 sau khi g·ª≠i license.", "err");
  }
}

async function reboot() { await sendLine("REBOOT"); }

// --- g√°n s·ª± ki·ªán ---
$("#btnConnect").onclick = () => openSerial().catch(e => log(String(e), "err"));
$("#btnGetDid").onclick = () => getDid().catch(e => log(String(e), "err"));
$("#btnActivate").onclick = () => activate().catch(e => log(String(e), "err"));
$("#btnReboot").onclick = () => reboot().catch(e => log(String(e), "err"));

// --- ƒë√≥ng trang: t·ª± gi·∫£i ph√≥ng serial ---
window.addEventListener("beforeunload", async () => {
  try { await reader?.releaseLock(); await writer?.releaseLock(); await port?.close(); } catch { }
  setMacTitle(""); // v·ªÅ MAC: Ch∆∞a k·∫øt n·ªëi
  setStatusUI(false, "Ch∆∞a k·∫øt n·ªëi");
});


// Initialize app when DOM is loaded
document.addEventListener("DOMContentLoaded", () => {
  initializeApp()
  initializePopups()
})
